---
version: "3.8"
networks:
  t2_proxy:
    external: true

services:
  dozzle:
#Dozzle is a simple and responsive application that provides you with a web based interface to monitor your Docker container logs live. 
    image: amir20/dozzle:latest
    container_name: dozzle
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - traefik.enable=true
      - traefik.http.services.dozzle-https.loadbalancer.server.port=8080
      - traefik.http.routers.dozzle-https.entrypoints=https
      - traefik.http.routers.dozzle-https.rule=Host(`${DOZZLE_SUB?DOZZLE_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.dozzle-https.tls=true
      - traefik.http.routers.dozzle-https.tls.certresolver=myresolver
      - traefik.http.routers.dozzle-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  librespeed:
#Librespeed is a very lightweight Speedtest implemented in Javascript, using XMLHttpRequest and Web Workers. No Flash, No Java, No Websocket,
    image: lscr.io/linuxserver/librespeed
    container_name: librespeed
    environment:
      - PUID=${PUID?PUID Variable not set}
      - PGID=${PGID?PGID Variable not set}
      - TZ=${TIMEZONE?TIMEZONE Variable not set}
      - PASSWORD=PASSWORD
      - CUSTOM_RESULTS=false
      - DB_TYPE=sqlite 
    volumes:
      - /var/data/librespeed/config:/config
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.services.exportarr-https.loadbalancer.server.port=80 
      - traefik.http.routers.exportarr-https.entrypoints=https
      - traefik.http.routers.exportarr-https.rule=Host(`${LIBRESPEED_SUB?LIBRESPEED_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.exportarr-https.tls=true
      - traefik.http.routers.exportarr-https.tls.certresolver=myresolver
      - traefik.http.routers.exportarr-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  monitorr:
#Monitorr is a self-hosted PHP web app that monitors the status of local and remote network services, websites, and applications.
    image: monitorr/monitorr
    container_name: monitorr
    environment:
      TZ: ${TIMEZONE?TIMEZONE Variable not set}
      PGID: 0
      PUGI: 0
    volumes:
      - /var/data/monitorr/app:/app
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.services.monitorr-https.loadbalancer.server.port=80
      - traefik.http.routers.monitorr-https.entrypoints=https
      - traefik.http.routers.monitorr-https.rule=Host(`${MONITORR_SUB?MONITORR_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.monitorr-https.tls=true
      - traefik.http.routers.monitorr-https.tls.certresolver=myresolver
      - traefik.http.routers.monitorr-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  netbootxyz:
#netboot.xyz enables you to PXE boot many Operating System installers and utilities from a simple to use menu powered by the iPXE project.
    image: lscr.io/linuxserver/netbootxyz
    container_name: netbootxyz
    environment:
      - PUID=${PUID?PUID Variable not set}
      - PGID=${PGID?PGID Variable not set}
#      - MENU_VERSION=1.9.9 #Leave commented for latest, uncomment to select
      - PORT_RANGE=30000:30010 #optional
      - SUBFOLDER=/ #optional
    volumes:
      - /mnt/data/netbootxyz/config:/config
      - /mnt/iso:/assets #optional
    ports:
      - 3000:3000
      - 69:69/udp
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.services.netbootxyz-https.loadbalancer.server.port=80
      - traefik.http.routers.netbootxyz-https.entrypoints=https
      - traefik.http.routers.netbootxyz-https.rule=Host(`${NETBOOT_SUB?NETBOOT_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.netbootxyz-https.tls=true
      - traefik.http.routers.netbootxyz-https.tls.certresolver=myresolver
      - traefik.http.routers.netbootxyz-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  pihole-one:
    container_name: pihole-one
    image: pihole/pihole:latest
    hostname: pi-hole
#     cap_add: # Uncomment if you want to use Pi-Hole for DHCP
#       - NET_ADMIN
    ports:
      - 443/tcp
      - 53/tcp
      - 53/udp
#       - 67/udp # Uncomment if you want to use Pi-Hole for DHCP
      - 80/tcp
      - 22/tcp
    environment:
      - FTLCONF_REPLY_ADDR4=192.168.1.5
      - WEBPASSWORD=${WEBPASSWORD}
      - PIHOLE_DNS_=192.168.1.6;192.168.1.13
    volumes:
      - /volume1/docker/pihole-unbound/pihole/volume:/etc/pihole:rw
      - /volume1/docker/pihole-unbound/pihole/config/hosts:/etc/hosts:ro
      - /volume1/docker/pihole-unbound/pihole/config/resolv.conf:/etc/resolv.conf:ro
      - /volume1/docker/pihole-unbound/pihole/config/dnsmasq.conf:/etc/dnsmasq.d/02-network.conf:ro
      - /volume1/docker/pihole-unbound/pihole/config/pihole-FTL.conf:/etc/pihole/pihole-FTL.conf:ro
    networks:
      smarthome:
        ipv4_address: ${PIHOLE_ONE_IP?PIHOLE_ONE_IP Variable not set}
    restart: always
  pihole-unbound:
    container_name: unbound
    image: mvance/unbound:latest
    hostname: syn-unbound
    mac_address: d0:ca:ab:cd:ef:02
    ports:
      - 53/tcp
      - 53/udp
    networks:
      smarthome:
        ipv4_address: ${PIHOLEUNBOUND_IP?PIHOLEUNBOUND_IP Variable not set}
    restart: always
  portainer:
#Portainer is a self-service container service delivery platform. It is the definitive container management GUI for Kubernetes, Docker and Swarm.
    image: portainer/portainer-ce:latest
    container_name: portainer
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9000:9000"
      - "8000:8000"
    volumes:
      - /var/data/portainer/data:/data
    labels:
      - traefik.enable=true
      - traefik.http.services.portainer-https.loadbalancer.server.port=9443
      - traefik.http.routers.portainer-https.entrypoints=https
      - traefik.http.routers.portainer-https.rule=Host(`${PORTAINER_SUB?PORTAINER_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.portainer-https.tls=true
      - traefik.http.routers.portainer-https.tls.certresolver=myresolver
      - traefik.http.routers.portainer-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  portus:
#Self hosted registry
    build: .
    image: opensuse/portus:development
    container_name: portus
    command: bundle exec rails runner /srv/Portus/examples/development/compose/init.rb
    environment:
      - PORTUS_MACHINE_FQDN_VALUE=${PORTUS_SUB?PORTUS_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}
      - PORTUS_PUMA_HOST=0.0.0.0:3000
      - PORTUS_CHECK_SSL_USAGE_ENABLED=false
      - PORTUS_SECURITY_CLAIR_SERVER=http://portus-clair:6060
      - CCONFIG_PREFIX=PORTUS
      - PORTUS_DB_HOST=portus-db
      - PORTUS_DB_PASSWORD=${PORTUSDB_PASS?PORTUSDB_PASS Variable not set}
      - PORTUS_DB_POOL=5
      - RAILS_SERVE_STATIC_FILES=true
    ports:
      - 3000:3000
    labels:
        - traefik.enable=true
        - traefik.http.services.portus-https.loadbalancer.server.port=5000
        - traefik.http.routers.portus-https.entrypoints=https
        - traefik.http.routers.portus-https.rule=Host(`${PORTUS_SUB?PORTUS_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
        - traefik.http.routers.portus-https.tls=true
        - traefik.http.routers.portus-https.tls.certresolver=myresolver
#        - traefik.http.routers.portus-https.middlewares=authelia@docker
    volumes:
      - /var/data/portus/data:/srv/Portus
    depends_on:
      - portus-clair
      - portus-background
      - portus-db
      - portus-webpack
  networks:
    t2_proxy:
  portus-background:
    image: opensuse/portus:development
    container_name: portus-background
    entrypoint: bundle exec rails runner /srv/Portus/bin/background.rb
    environment:
      - PORTUS_MACHINE_FQDN_VALUE=${PORTUS_SUB?PORTUS_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}
      - PORTUS_SECURITY_CLAIR_SERVER=http://portus-clair:6060
      - CCONFIG_PREFIX=PORTUS
      - PORTUS_DB_HOST=portus-db
      - PORTUS_DB_PASSWORD=${PORTUSDB_PASS?PORTUSDB_PASS Variable not set}
      - PORTUS_DB_POOL=5
    volumes:
      - /var/data/portus/background:/srv/Portus
    depends_on:
    - portus-clair
    - portus-db
  portus-webpack:
    image: kkarczmarczyk/node-yarn:latest
    container_name: portus-webpack
    command: bash /srv/Portus/examples/development/compose/bootstrap-webpack
    working_dir: /srv/Portus
    volumes:
      - /var/data/portus/webpack:/srv/Portus
  portus-clair:
    image: quay.io/coreos/clair:v2.0.2
    container_name: portus-clair
    restart: unless-stopped
    volumes:
      - /tmp:/tmp
      - /var/data/portus/clair/clair.yml:/clair.yml
    command: [-config, /clair.yml]
  portus-db:
    image: library/mariadb:10.0.23
    container_name: portus-db
    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci --init-connect='SET NAMES UTF8;' --innodb-flush-log-at-trx-commit=0
    environment:
      MYSQL_ROOT_PASSWORD: ${PORTUSDB_PASS?PORTUSDB_PASS Variable not set}
#  portus-postgres:
#    image: library/postgres:10-alpine
#    container_name: portus-postgres
#    environment:
#      POSTGRES_PASSWORD: ${PORTUSDB_PASS?PORTUSDB_PASS Variable not set}
  portus-registry:
    image: library/registry:2.6
    container_name: portus-registry
    environment:
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /registry_data
      REGISTRY_STORAGE_DELETE_ENABLED: "true"
      REGISTRY_HTTP_ADDR: 0.0.0.0:5000
      REGISTRY_HTTP_DEBUG_ADDR: 0.0.0.0:5001
      REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE: /etc/docker/registry/portus.crt
      REGISTRY_AUTH_TOKEN_REALM: http://$${PORTUS_SUB?PORTUS_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}:3000/v2/token
      REGISTRY_AUTH_TOKEN_SERVICE: $${PORTUS_SUB?PORTUS_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}:5000
      REGISTRY_AUTH_TOKEN_ISSUER: ${PORTUS_SUB?PORTUS_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}
      REGISTRY_NOTIFICATIONS_ENDPOINTS: >
        - name: portus
          url: http://$${PORTUS_SUB?PORTUS_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}:3000/v2/webhooks/events
          timeout: 2000ms
          threshold: 5
          backoff: 1s
    volumes:
      - /var/data/portus/registry:/registry_data
      - /var/data/portus/certificate/portus.crt:/etc/docker/registry/portus.crt:ro
    ports:
      - 5000:5000
      - 5001:5001
    labels:
        - traefik.enable=true
        - traefik.http.services.portus-registry-https.loadbalancer.server.port=5000
        - traefik.http.routers.portus-registry-https.entrypoints=https
        - traefik.http.routers.portus-registry-https.rule=Host(`${REGISTRY_SUB?REGISTRY_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
        - traefik.http.routers.portus-registry-https.tls=true
        - traefik.http.routers.portus-registry-https.tls.certresolver=myresolver
#        - traefik.http.routers.portus-registry-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  depends_on:
    - portus
  taisun:
#With Taisun you can manage your server all from the convience of your web browser. With built in web based Linux desktops combined with our management application, your browser is your portal to accelerating server management and application development.
    image: linuxserver/taisun
    container_name: taisun
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.services.taisun-https.loadbalancer.server.port=3000
      - traefik.http.routers.taisun-https.entrypoints=https
      - traefik.http.routers.taisun-https.rule=Host(`${TAISUN_SUB?TAISUN_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.taisun-https.tls=true
      - traefik.http.routers.taisun-https.tls.certresolver=myresolver
      - traefik.http.routers.taisun-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  uptime-kuma:
#Is a self-hosted monitoring tool like "Uptime Robot
    image: louislam/uptime-kuma
    container_name: uptimekuma
    restart: unless-stopped
    volumes:
      - /var/data/uptime-kuma/data:/app/data
    labels:
      - traefik.enable=true
      - traefik.http.services.kuma-https.loadbalancer.server.port=3001
      - traefik.http.routers.kuma-https.entrypoints=https
      - traefik.http.routers.kuma-https.rule=Host(`${KUMA_SUB?KUMA_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.kuma-https.tls=true
      - traefik.http.routers.kuma-https.tls.certresolver=myresolver
      - traefik.http.routers.kuma-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  wireguard:
    image: lscr.io/linuxserver/wireguard
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=1 
      - PGID=1
      - SERVERURL=${WIREGUARD_SUB?WIREGUARD_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}
      - TZ=${TIMEZONE?TIMEZONE Variable not set}
      - SERVERPORT=51820
      - PEERS=1
      - PEERDNS=auto
      - INTERNAL_SUBNET=10.13.13.0
      - ALLOWEDIPS=0.0.0.0/0
    volumes:
      - /var/data/wireguard/config:/config
      - /lib/modules:/lib/modules
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped