---
version: "3.8"
networks:
  t2_proxy:
    external: true
services:
  deluge:
#Torrent Client
    image: lscr.io/linuxserver/deluge
    container_name: deluge
    environment:
      - PUID=${PUID?PUID Variable not set}
      - PGID=${PGID?PGID Variable not set}
      - TZ=${TIMEZONE?TIMEZONE Variable not set}
      - DELUGE_LOGLEVEL=error #optional
    volumes:
      - /var/data/deluge/config:/config
      - /mnt/downloads:/downloads
    ports:
      - ${DELUGE_PORT?DELUGE_PORT Variable not set}:6881
      - ${DELUGE_PORT?DELUGE_PORT Variable not set}:6881/udp
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}
    labels:
      - traefik.enable=true
      - traefik.http.services.deluge-https.loadbalancer.server.port=8112
      - traefik.http.routers.deluge-https.entrypoints=https
      - traefik.http.routers.deluge-https.rule=Host(`${DELUGE_SUB?DELUGE_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.deluge-https.tls=true
      - traefik.http.routers.deluge-https.tls.certresolver=myresolver
      - traefik.http.routers.deluge-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  exatorrent:
#exatorrent is Elegant BitTorrent Client written in Go. Â· It is Simple, easy to use, yet feature rich.
    image: ghcr.io/varbhat/exatorrent:latest
    container_name: exatorrent
    volumes:
      - /mnt/exatorrent:/exa/exadir
    ports:
      - ${EXATORRENT_PORT?EXATORRENT_PORT Variable not set}:42069
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}
    labels:
      - traefik.enable=true
      - traefik.http.services.exatorrent-https.loadbalancer.server.port=5000 
      - traefik.http.routers.exatorrent-https.entrypoints=https
      - traefik.http.routers.exatorrent-https.rule=Host(`${SNIPPITBOX_SUB?SNIPPITBOX_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.exatorrent-https.tls=true
      - traefik.http.routers.exatorrent-https.tls.certresolver=myresolver
      - traefik.http.routers.exatorrent-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  exportarr:
# Allows you to share your Radarr lists with others, without having to give them your Radarr API key
    image: petersem/exportarr
    container_name: exportarr
    build:
      context: .
      dockerfile: ./Dockerfile
    environment:
      NODE_ENV: development
      TOKEN: ${EXPORTARR_TOKEN?EXPORTARR_TOKEN Variable not set}
      RADARR_URL: "http://${RADARR_SUB?RADARR_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}"
      RADARR_TOKEN: ${RADARR_TOKEN?RADARR_TOKEN Variable not set}
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}    
    labels:
      - traefik.enable=true
      - traefik.http.services.exportarr-https.loadbalancer.server.port=3000 
      - traefik.http.routers.exportarr-https.entrypoints=https
      - traefik.http.routers.exportarr-https.rule=Host(`${EXPORTARR_SUB?EXPORTARR_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.exportarr-https.tls=true
      - traefik.http.routers.exportarr-https.tls.certresolver=myresolver
      - traefik.http.routers.exportarr-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  jackett:
#Jackett works as a proxy server: it translates queries from apps (Sonarr, Radarr, SickRage, CouchPotato, Mylar3, Lidarr, DuckieTV, qBittorrent, Nefarious etc.) into tracker-site-specific http queries, parses the html or json response, and then sends results back to the requesting software. This allows for getting recent uploads (like RSS) and performing searches. Jackett is a single repository of maintained indexer scraping & translation logic - removing the burden from other apps.
    image: lscr.io/linuxserver/jackett
    environment:
      - PUID=${PUID?PUID Variable not set}
      - PGID=${PGID?PGID Variable not set}
      - TZ=${TIMEZONE?TIMEZONE Variable not set}
      - AUTO_UPDATE=true
    volumes:
      - /var/data/jackett/config:/config
      - /mnt/downloads:/downloads
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}
    labels:
      - traefik.enable=true
      - traefik.http.services.jackett-https.loadbalancer.server.port=9117
      - traefik.http.routers.jackett-https.entrypoints=https
      - traefik.http.routers.jackett-https.rule=Host(`${JACKETT_SUB?JACKETT_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.jackett-https.tls=true
      - traefik.http.routers.jackett-https.tls.certresolver=myresolver
      - traefik.http.routers.jackett-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  lidarr:
#Lidarr is a music collection manager for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new albums from your favorite artists
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    environment:
      - PUID=${PUID?PUID Variable not set}
      - PGID=${PGID?PGID Variable not set}
      - TZ=${TIMEZONE?TIMEZONE Variable not set}
    volumes:
      - /var/data/lidarr/config:/config
      - /mnt/music:/music 
      - /mnt/downloads:/downloads
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}
    labels:
      - traefik.enable=true
      - traefik.http.services.lidarr-https.loadbalancer.server.port=8686
      - traefik.http.routers.lidarr-https.entrypoints=https
      - traefik.http.routers.lidarr-https.rule=Host(`${LIDARR_SUB?LIDARR_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.lidarr-https.tls=true
      - traefik.http.routers.lidarr-https.tls.certresolver=myresolver
      - traefik.http.routers.lidarr-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  medusa:
#Medusa is an automatic Video Library Manager for TV Shows. It watches for new episodes of your favorite shows, and when they are posted it does its magic.
    image: lscr.io/linuxserver/medusa
    container_name: medusa
    environment:
      - PUID=${PUID?PUID Variable not set}
      - PGID=${PGID?PGID Variable not set}
      - TZ=${TIMEZONE?TIMEZONE Variable not set}
    volumes:
      - /var/data/medusa/config:/config
      - /mnt/downloads:/downloads
      - /mnt/tv:/tv
      - /mnt/anime:/anime
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}
    labels:
      - traefik.enable=true
      - traefik.http.services.medusa-https.loadbalancer.server.port=8081
      - traefik.http.routers.medusa-https.entrypoints=https
      - traefik.http.routers.medusa-https.rule=Host(`${MEDUSA_SUB?MEDUSA_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.medusa-https.tls=true
      - traefik.http.routers.medusa-https.tls.certresolver=myresolver
      - traefik.http.routers.medusa-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  mylar3:
#Mylar3 is an automated Comic Book downloader (cbr/cbz) for use with NZB and torrents written in python. It supports SABnzbd, NZBGET, and many torrent clients 
    image: lscr.io/linuxserver/mylar3
    container_name: mylar3
    environment:
      - PUID=${PUID?PUID Variable not set}
      - PGID=${PGID?PGID Variable not set}
    volumes:
      - /var/data/mylar/config:/config
      - /mnt/comics:/comics
      - /mnt/manga:/manga
      - /mnt/downloads:/downloads
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}
    labels:
      - traefik.enable=true
      - traefik.http.services.mylar-https.loadbalancer.server.port=8090
      - traefik.http.routers.mylar-https.entrypoints=https
      - traefik.http.routers.mylar-https.rule=Host(`${MYLAR_SUB?MYLAR_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.mylar-https.tls=true
      - traefik.http.routers.mylar-https.tls.certresolver=myresolver
      - traefik.http.routers.mylar-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  podgrab:
#A self-hosted podcast manager/downloader/archiver tool to download podcast episodes as soon as they become live with an integrated player.
    image: akhilrex/podgrab
    container_name: podgrab
    environment:
      - CHECK_FREQUENCY=240
      #- PASSWORD=password     ## Uncomment to enable basic authentication, username = podgrab
    volumes:
      - /var/data/podgrab/config:/config
      - /path/to/data:/assets
    ports:
      - 8080:8080
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}
    labels:
        - traefik.enable=true
        - traefik.http.services.podgrab-https.loadbalancer.server.port=8080
        - traefik.http.routers.podgrab-https.entrypoints=https
        - traefik.http.routers.podgrab-https.rule=Host(`${PODGRAB_SUB?PODGRAB_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
        - traefik.http.routers.podgrab-https.tls=true
        - traefik.http.routers.podgrab-https.tls.certresolver=myresolver
        - traefik.http.routers.podgrab-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  posterr:
    image: petersem/posterr
    environment:
      TZ: ${TIMEZONE?TIMEZONE Variable not set}
      BASEPATH: ""
    volumes:
      - /var/data/posterr/config:/usr/src/app/config
      - /var/data/posterr/custom:/usr/src/app/public/custom
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}
    labels:
      - traefik.enable=true
      - traefik.http.services.dashmachine-https.loadbalancer.server.port=3000
      - traefik.http.routers.dashmachine-https.entrypoints=https
      - traefik.http.routers.dashmachine-https.rule=Host(`${POSTERR_SUB?POSTERR_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.dashmachine-https.tls=true
      - traefik.http.routers.dashmachine-https.tls.certresolver=myresolver
      - traefik.http.routers.dashmachine-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  prowlarr:
#Prowlarr is an indexer manager/proxy built on the popular arr .net/reactjs base stack to integrate with your various PVR apps. Prowlarr supports management of both Torrent Trackers and Usenet Indexers. It integrates seamlessly with Lidarr, Mylar3, Radarr, Readarr, and Sonarr offering complete management of your indexers with no per app Indexer setup required (we do it all).
    image: lscr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    environment:
      - PUID=${PUID?PUID Variable not set}
      - PGID=${PGID?PGID Variable not set}
      - TZ=${TIMEZONE?TIMEZONE Variable not set}
    volumes:
      - /var/data/prowlarr/config:/config
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}
    labels:
      - traefik.enable=true
      - traefik.http.services.prowlarr-https.loadbalancer.server.port=9696
      - traefik.http.routers.prowlarr-https.entrypoints=https
      - traefik.http.routers.prowlarr-https.rule=Host(`${PROWLARR_SUB?PROWLARR_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.prowlarr-https.tls=true
      - traefik.http.routers.prowlarr-https.tls.certresolver=myresolver
      - traefik.http.routers.prowlarr-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  qbittorrent:
#Torrent Client
    image: lscr.io/linuxserver/qbittorrent
    container_name: qbittorrent
    environment:
      - PUID=${PUID?PUID Variable not set}
      - PGID=${PGID?PGID Variable not set}
      - TZ=${TIMEZONE?TIMEZONE Variable not set}
      - WEBUI_PORT=8080
    volumes:
      - /var/data/qbittorrent/config:/config
      - /mnt/downloads:/downloads
    ports:
      - ${QBITTORRENT_PORT?QBITTORRENT_PORT Variable not set}:6881
      - ${QBITTORRENT_PORT?QBITTORRENT_PORT Variable not set}:6881/udp
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}
    labels:
      - traefik.enable=true
      - traefik.http.services.qbittorrent-https.loadbalancer.server.port=8080
      - traefik.http.routers.qbittorrent-https.entrypoints=https
      - traefik.http.routers.qbittorrent-https.rule=Host(`${QBITTORRENT_SUB?QBITTORRENT_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.qbittorrent-https.tls=true
      - traefik.http.routers.qbittorrent-https.tls.certresolver=myresolver
      - traefik.http.routers.qbittorrent-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  radarr:
#Radarr is a movie collection manager for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new movies and will interface with clients and indexers to grab, sort, and rename them. It can also be configured to automatically upgrade the quality of existing files in the library when a better quality format becomes available. Note that only one type of a given movie is supported. If you want both an 4k version and 1080p version of a given movie you will need multiple instances.
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=${PUID?PUID Variable not set}
      - PGID=${PGID?PGID Variable not set}
      - TZ=${TIMEZONE?TIMEZONE Variable not set}
    volumes:
      - /var/data/radarr/config:/config
      - /mnt/movies:/movies
      - /mnt/downloads:/downloads
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}
    labels:
      - traefik.enable=true
      - traefik.http.services.radarr-https.loadbalancer.server.port=7878
      - traefik.http.routers.radarr-https.entrypoints=https
      - traefik.http.routers.radarr-https.rule=Host(`${RADARR_SUB?RADARR_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.radarr-https.tls=true
      - traefik.http.routers.radarr-https.tls.certresolver=myresolver
      - traefik.http.routers.radarr-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  readarr:
#Readarr is a ebook collection manager for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new books from your favorite authors 
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=${PUID?PUID Variable not set}
      - PGID=${PGID?PGID Variable not set}
      - TZ=${TIMEZONE?TIMEZONE Variable not set}
    volumes:
      - /var/data/readarr/config:/config
      - /mnt/books:/books 
      - /mnt/downloads:/downloads 
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}
    labels:
      - traefik.enable=true
      - traefik.http.services.readarr-https.loadbalancer.server.port=8787
      - traefik.http.routers.readarr-https.entrypoints=https
      - traefik.http.routers.readarr-https.rule=Host(`${READARR_SUB?READARR_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.readarr-https.tls=true
      - traefik.http.routers.readarr-https.tls.certresolver=myresolver
      - traefik.http.routers.readarr-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  rutorrent:
#Torrent client
    image: ghcr.io/linuxserver/rutorrent
    container_name: rutorrent
    environment:
      - PUID=${PUID?PUID Variable not set}
      - PGID=${PGID?PGID Variable not set}
    volumes:
      - /var/data/rutorrent/config:/config
      - /mnt/rutorrent:/downloads
    ports:
      - 5000:5000
      - ${RUTORRENT_TCPPORT?RUTORRENT_TCPPORT Variable not set}:51413
      - ${RUTORRENT_UDPPORT?RUTORRENT_UDPPORT Variable not set}:6881/udp
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}
    labels:
      - traefik.enable=true
      - traefik.http.services.rutorrent-https.loadbalancer.server.port=80
      - traefik.http.routers.rutorrent-https.entrypoints=https
      - traefik.http.routers.rutorrent-https.rule=Host(`${RUTORRENT_SUB?RUTORRENT_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.rutorrent-https.tls=true
      - traefik.http.routers.rutorrent-https.tls.certresolver=myresolver
      - traefik.http.routers.rutorrent-https.middlewares=authelia@docker
    networks:
      t2_proxy:

  sickchill:
#Automatic Video Library Manager for TV Shows. It watches for new episodes of your favorite shows, and when they are posted it does its magic
    image: lscr.io/linuxserver/sickchill
    container_name: sickchill
    environment:
      - PUID=${PUID?PUID Variable not set}
      - PGID=${PGID?PGID Variable not set}
      - TZ=${TIMEZONE?TIMEZONE Variable not set}
    volumes:
      - /var/data/sickchill/config:/config
      - /mnt/downloads:/downloads
      - /mnt/tv:/tv
      - /mnt/anime:/anime
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}
    labels:
      - traefik.enable=true
      - traefik.http.services.sickchill-https.loadbalancer.server.port=8081
      - traefik.http.routers.sickchill-https.entrypoints=https
      - traefik.http.routers.sickchill-https.rule=Host(`${SICKCHILL_SUB?SICKCHILL_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.sickchill-https.tls=true
      - traefik.http.routers.sickchill-https.tls.certresolver=myresolver
      - traefik.http.routers.sickchill-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  sickgear:
#SickGear provides management of TV shows and/or Anime, it detects new episodes, links downloader apps, and more. 
    image: lscr.io/linuxserver/sickgear
    container_name: sickgear
    environment:
      - PUID=${PUID?PUID Variable not set}
      - PGID=${PGID?PGID Variable not set}
    volumes:
      - /var/data/sickgear/config:/config
      - /mnt/tv:/tv
      - /mnt/anime:/anime
      - /mnt/downloads:/downloads
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}
    labels:
      - traefik.enable=true
      - traefik.http.services.sickgear-https.loadbalancer.server.port=8081
      - traefik.http.routers.sickgear-https.entrypoints=https
      - traefik.http.routers.sickgear-https.rule=Host(`${SICKCHILL_SUB?SICKCHILL_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.sickgear-https.tls=true
      - traefik.http.routers.sickgear-https.tls.certresolver=myresolver
      - traefik.http.routers.sickgear-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  sonarr:
#Sonarr is a Personal Video Recorder for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new episodes of your favorite shows and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available.
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${PUID?PUID Variable not set}
      - PGID=${PGID?PGID Variable not set}
      - TZ=${TIMEZONE?TIMEZONE Variable not set}
    volumes:
      - /var/data/sonarr/config:/config
      - /mnt/tv:/tv
      - /mnt/anime:/anime
      - /mnt/downloads:/downloads
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}
    labels:
      - traefik.enable=true
      - traefik.http.services.sonarr-https.loadbalancer.server.port=8989
      - traefik.http.routers.sonarr-https.entrypoints=https
      - traefik.http.routers.sonarr-https.rule=Host(`${SONARR_SUB?SONARR_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.sonarr-https.tls=true
      - traefik.http.routers.sonarr-https.tls.certresolver=myresolver
      - traefik.http.routers.sonarr-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  torrentmonitor:
#To test - english or russian?
    image: alfonder/torrentmonitor
    container_name: torrentmonitor
    volumes:
      - /mnt/torrents:/data/htdocs/torrents
      - /var/data/torrentmonitor/db:/data/htdocs/db
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}
    labels:
      - traefik.enable=true
      - traefik.http.services.torrentmonitor-https.loadbalancer.server.port=80
      - traefik.http.routers.torrentmonitor-https.entrypoints=https
      - traefik.http.routers.torrentmonitor-https.rule=Host(`${TORRENTMONITOR_SUB?TORRENTMONITOR_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.torrentmonitor-https.tls=true
      - traefik.http.routers.torrentmonitor-https.tls.certresolver=myresolver
      - traefik.http.routers.torrentmonitor-https.middlewares=authelia@docker
    networks:
      t2_proxy:
  transmission:
#Torrent client
    image: lscr.io/linuxserver/transmission
    container_name: transmission
    environment:
      - PUID=${PUID?PUID Variable not set}
      - PGID=${PGID?PGID Variable not set}
      - TZ=${TIMEZONE?TIMEZONE Variable not set}
      - TRANSMISSION_WEB_HOME=/combustion-release/ #optional
    volumes:
      - /var/data/transmission/config:/config
      - /mnt/downloads:/downloads
      - /var/data/transmission/watch:/watch
    ports:
      - ${TRANSMISSION_PORT?TRANSMISSION_PORT Variable not set}:${TRANSMISSION_PORT?TRANSMISSION_PORT Variable not set}
      - ${TRANSMISSION_PORT?TRANSMISSION_PORT Variable not set}:${TRANSMISSION_PORT?TRANSMISSION_PORT Variable not set}/udp
    restart: ${RESTART_POLICY?RESTART_POLICY Variable not set}
    labels:
      - traefik.enable=true
      - traefik.http.services.transmission-https.loadbalancer.server.port=9091
      - traefik.http.routers.transmission-https.entrypoints=https
      - traefik.http.routers.transmission-https.rule=Host(`${TRANSMISSION_SUB?TRANSMISSION_SUB Variable not set}.${DOMAIN?DOMAIN Variable not set}`)
      - traefik.http.routers.transmission-https.tls=true
      - traefik.http.routers.transmission-https.tls.certresolver=myresolver
      - traefik.http.routers.transmission-https.middlewares=authelia@docker
    networks:
      t2_proxy: